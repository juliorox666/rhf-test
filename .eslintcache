[{"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/index.tsx":"1","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/mocks/browser.ts":"2","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/App.tsx":"3","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/mocks/handlers.ts":"4","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/components/MyForm/index.tsx":"5","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/services/api.ts":"6","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/services/user.ts":"7"},{"size":463,"mtime":1612744356939,"results":"8","hashOfConfig":"9"},{"size":123,"mtime":1612744088633,"results":"10","hashOfConfig":"9"},{"size":407,"mtime":1612749826431,"results":"11","hashOfConfig":"9"},{"size":706,"mtime":1612748834838,"results":"12","hashOfConfig":"9"},{"size":6460,"mtime":1612820914502,"results":"13","hashOfConfig":"9"},{"size":125,"mtime":1612740912855,"results":"14","hashOfConfig":"9"},{"size":269,"mtime":1612820937159,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"xcdh2l",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/index.tsx",[],["32","33","34","35","36"],"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/mocks/browser.ts",[],"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/App.tsx",[],"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/mocks/handlers.ts",[],"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/components/MyForm/index.tsx",["37"],"/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from \"react\";\nimport { styled } from \"@material-ui/core/styles\";\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useForm } from \"react-hook-form\";\nimport { http } from \"services/api\";\nimport { User, createUser } from \"services/user\";\nimport \"./styles.css\";\n\nconst TextFieldCustom = styled(TextField)({\n  width: \"100%\",\n  border: 0,\n  borderRadius: 3,\n  color: \"white\",\n});\n\ntype InputTextProps = {\n  id: string;\n  \"data-testid\": string;\n  name: string;\n  error: boolean;\n  helperText: React.ReactNode;\n  label: string;\n};\nconst InputText = React.forwardRef<TextFieldProps, InputTextProps>(\n  ({ \"data-testid\": datatestid, ...props }: InputTextProps, ref) => (\n    <TextFieldCustom\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...props}\n      inputRef={ref}\n      inputProps={{ \"data-testid\": datatestid }}\n      variant=\"outlined\"\n    />\n  )\n);\n\ninterface MyFormProps {\n  onSubmitHandler: (data: User) => void;\n}\n\nconst MyForm: React.FC<MyFormProps> = ({\n  onSubmitHandler = (data) => JSON.stringify(data),\n}: MyFormProps) => {\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [user, setUser] = useState<User | null>();\n  const {\n    register,\n    handleSubmit,\n    errors,\n    formState: { isDirty },\n    reset,\n  } = useForm<User>();\n  const onSubmit = handleSubmit((dataForm) => {\n    setIsLoading(true);\n    createUser(dataForm)\n      .then((response) => {\n        const { data } = response;\n        setHasError(false);\n        setUser(data);\n        onSubmitHandler(data);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setHasError(true);\n        setIsLoading(false);\n      });\n  });\n\n  useEffect(() => {\n    if (user) {\n      reset(user);\n    }\n  }, [reset, user]);\n\n  return (\n    <div className=\"my-form\">\n      <pre>\n        <code>{JSON.stringify(user, null, 4)}</code>\n      </pre>\n      <div className=\"my-form__message\">\n        {user?.firstName && (\n          <Alert data-testid=\"alert-message-success\" severity=\"success\">\n            Sign up successfully done!\n          </Alert>\n        )}\n        {hasError && (\n          <Alert data-testis=\"alert-message-error\" severity=\"error\">\n            Oh no, something bad happened.\n          </Alert>\n        )}\n      </div>\n      <div className=\"my-form__title\">üìù Register Form</div>\n      <div className=\"my-form__box\">\n        <form className=\"form-data\" onSubmit={onSubmit}>\n          <div className=\"form-data__label\">\n            <InputText\n              error={!!errors.firstName}\n              helperText={\n                errors.firstName ? (\n                  <span data-testid=\"firstname-error-message\">\n                    First name is required\n                  </span>\n                ) : (\n                  ``\n                )\n              }\n              label=\"First name\"\n              data-testid=\"firstName\"\n              id=\"firstName\"\n              name=\"firstName\"\n              ref={register({ required: true })}\n            />\n          </div>\n          <div className=\"form-data__label\">\n            <InputText\n              error={!!errors.lastName}\n              helperText={\n                errors.lastName ? (\n                  <span data-testid=\"lastname-error-message\">\n                    Last name is required\n                  </span>\n                ) : (\n                  ``\n                )\n              }\n              label=\"Last name\"\n              data-testid=\"lastName\"\n              id=\"lastName\"\n              name=\"lastName\"\n              ref={register({ required: true })}\n            />\n          </div>\n          <div className=\"form-data__label\">\n            <InputText\n              error={!!errors.phone}\n              helperText={\n                errors.phone ? (\n                  <span data-testid=\"phone-error-message\">\n                    Phone is required\n                  </span>\n                ) : (\n                  ``\n                )\n              }\n              label=\"Phone\"\n              data-testid=\"phone\"\n              id=\"phone\"\n              name=\"phone\"\n              ref={register({ required: true })}\n            />\n          </div>\n          <div className=\"form-data__label\">\n            <InputText\n              error={!!errors.email}\n              helperText={\n                errors.email ? (\n                  <span data-testid=\"email-error-message\">\n                    Email is required\n                  </span>\n                ) : (\n                  ``\n                )\n              }\n              label=\"Email\"\n              data-testid=\"email\"\n              id=\"email\"\n              name=\"email\"\n              ref={register({ required: true })}\n            />\n          </div>\n          <div className=\"form-data__label\">\n            <select\n              className={`form-data__label select-component ${\n                errors.gender ? \"select-component-error\" : \"\"\n              }`}\n              name=\"gender\"\n              data-testid=\"gender\"\n              ref={register({ required: true })}\n            >\n              <option value=\"\">- SELECT ONE -</option>\n              <option value=\"male\">Male</option>\n              <option value=\"female\">Female</option>\n              <option value=\"other\">Other</option>\n            </select>\n            {errors.gender && (\n              <p\n                className=\"select-component__message\"\n                data-testid=\"gender-error-message\"\n                role=\"alert\"\n              >\n                Gender is required\n              </p>\n            )}\n          </div>\n          <div className=\"form-data__label\">\n            {isLoading && (\n              <CircularProgress\n                className=\"form-data__label loading-icon\"\n                data-testid=\"icon-loading\"\n              />\n            )}\n          </div>\n          <div className=\"form-data__submit submit\">\n            <input\n              disabled={!isDirty || isLoading}\n              id=\"submit\"\n              data-testid=\"submit\"\n              className=\"submit__button\"\n              type=\"submit\"\n              value=\"Submit\"\n            />\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default MyForm;\n","/Users/juliocesarguedes/Projects/Admios/rhf-test/src/services/api.ts",[],"/Users/juliocesarguedes/Projects/Admios/rhf-test/src/services/user.ts",["38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":8,"column":10,"nodeType":"51","messageId":"52","endLine":8,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":11,"column":27,"nodeType":"55","messageId":"56","endLine":11,"endColumn":46},"lines-around-directive",["57"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'http' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","padding-line-between-statements"]